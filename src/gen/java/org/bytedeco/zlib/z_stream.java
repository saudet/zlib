// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.zlib;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.zlib.global.zlib.*;


@Properties(inherit = org.bytedeco.zlib.presets.zlib.class)
public class z_stream extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public z_stream() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public z_stream(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public z_stream(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public z_stream position(long position) {
        return (z_stream)super.position(position);
    }
    @Override public z_stream getPointer(long i) {
        return new z_stream(this).position(position + i);
    }

    public native @Cast("Bytef*") BytePointer next_in(); public native z_stream next_in(BytePointer setter);     /* next input byte */
    public native @Cast("uInt") int avail_in(); public native z_stream avail_in(int setter);  /* number of bytes available at next_in */
    public native @Cast("uLong") long total_in(); public native z_stream total_in(long setter);  /* total number of input bytes read so far */

    public native @Cast("Bytef*") BytePointer next_out(); public native z_stream next_out(BytePointer setter); /* next output byte will go here */
    public native @Cast("uInt") int avail_out(); public native z_stream avail_out(int setter); /* remaining free space at next_out */
    public native @Cast("uLong") long total_out(); public native z_stream total_out(long setter); /* total number of bytes output so far */

    public native @Cast("char*") BytePointer msg(); public native z_stream msg(BytePointer setter);  /* last error message, NULL if no error */
    public native internal_state state(); public native z_stream state(internal_state setter); /* not visible by applications */

    public native alloc_func zalloc(); public native z_stream zalloc(alloc_func setter);  /* used to allocate the internal state */
    public native free_func zfree(); public native z_stream zfree(free_func setter);   /* used to free the internal state */
    public native Pointer opaque(); public native z_stream opaque(Pointer setter);  /* private data object passed to zalloc and zfree */

    public native int data_type(); public native z_stream data_type(int setter);  /* best guess about the data type: binary or text
                           for deflate, or the decoding state for inflate */
    public native @Cast("uLong") long adler(); public native z_stream adler(long setter);      /* Adler-32 or CRC-32 value of the uncompressed data */
    public native @Cast("uLong") long reserved(); public native z_stream reserved(long setter);   /* reserved for future use */
}
