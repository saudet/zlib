// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.zlib;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.zlib.global.zlib.*;

// #endif

// #ifndef Z_SOLO

/* gzgetc() macro and its supporting function and exposed data structure.  Note
 * that the real internal state is much larger than the exposed structure.
 * This abbreviated structure exposes just enough for the gzgetc() macro.  The
 * user should not mess with these exposed elements, since their names or
 * behavior could change in the future, perhaps even capriciously.  They can
 * only be used by the gzgetc() macro.  You have been warned.
 */
@Name("gzFile_s") @Properties(inherit = org.bytedeco.zlib.presets.zlib.class)
public class gzFile extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public gzFile() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public gzFile(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public gzFile(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public gzFile position(long position) {
        return (gzFile)super.position(position);
    }
    @Override public gzFile getPointer(long i) {
        return new gzFile(this).position(position + i);
    }

    public native @Cast("unsigned") int have(); public native gzFile have(int setter);
    public native @Cast("unsigned char*") BytePointer next(); public native gzFile next(BytePointer setter);
    public native @Cast("z_off64_t") long pos(); public native gzFile pos(long setter);
}
