// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.zlib;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.zlib.global.zlib.*;


/*
     gzip header information passed to and from zlib routines.  See RFC 1952
  for more details on the meanings of these fields.
*/
@Properties(inherit = org.bytedeco.zlib.presets.zlib.class)
public class gz_header extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public gz_header() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public gz_header(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public gz_header(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public gz_header position(long position) {
        return (gz_header)super.position(position);
    }
    @Override public gz_header getPointer(long i) {
        return new gz_header(this).position(position + i);
    }

    public native int text(); public native gz_header text(int setter);       /* true if compressed data believed to be text */
    public native @Cast("uLong") long time(); public native gz_header time(long setter);       /* modification time */
    public native int xflags(); public native gz_header xflags(int setter);     /* extra flags (not used when writing a gzip file) */
    public native int os(); public native gz_header os(int setter);         /* operating system */
    public native @Cast("Bytef*") BytePointer extra(); public native gz_header extra(BytePointer setter);     /* pointer to extra field or Z_NULL if none */
    public native @Cast("uInt") int extra_len(); public native gz_header extra_len(int setter);  /* extra field length (valid if extra != Z_NULL) */
    public native @Cast("uInt") int extra_max(); public native gz_header extra_max(int setter);  /* space at extra (only when reading header) */
    public native @Cast("Bytef*") BytePointer name(); public native gz_header name(BytePointer setter);      /* pointer to zero-terminated file name or Z_NULL */
    public native @Cast("uInt") int name_max(); public native gz_header name_max(int setter);   /* space at name (only when reading header) */
    public native @Cast("Bytef*") BytePointer comment(); public native gz_header comment(BytePointer setter);   /* pointer to zero-terminated comment or Z_NULL */
    public native @Cast("uInt") int comm_max(); public native gz_header comm_max(int setter);   /* space at comment (only when reading header) */
    public native int hcrc(); public native gz_header hcrc(int setter);       /* true if there was or will be a header crc */
    public native int done(); public native gz_header done(int setter);       /* true when done reading gzip header (not used
                           when writing a gzip file) */
}
